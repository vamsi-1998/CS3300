//
// Generated by JTB 1.3.2
//
// References
// http://compilers.cs.ucla.edu/jtb/jtb-2003/docs.html
// https://www.geeksforgeeks.org/strings-in-java/
// Lab sessions and videos
// https://javarevisited.blogspot.com/2015/12/how-to-split-comma-separated-string-in-java-example.html#axzz76udcxjdm

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A>{
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   SymbolTable st = new SymbolTable() ;
   // current string name
   String cname ;
   // current function name
   String fname ;
   // current parent name
   String pname ;
   int scope = 0 ;
   int e = 0 ;
   // String list1 = "";
   // String list2 = "";
   // gives the current classBox
   public classBox currbox ;

   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }


   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R) n.tokenImage;  }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu ){
      R _ret=null;

      // for the first parse build the symbol table
      // setting argu = "first" for first parse

      n.f0.accept(this, (A) "first" );
      n.f1.accept(this,(A) "first"  );
      n.f2.accept(this, (A) "first" );
      //this.st.printTable() ;

      // for the second parse do type checking
      // setting argu = "second" for second parse
      n.f0.accept(this, (A) "second" );
      n.f1.accept(this,(A) "second"  );
      n.f2.accept(this, (A) "second" );
      System.out.println("Program type checked successfully");
    //  System.out.print('\n');
      return _ret;
   }
   /**
    * f0 -> "'\n'class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> tatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu){

      R _ret=null;
      n.f0.accept(this, argu);
      String id = (String) n.f1.accept(this, argu);
      this.cname = id ;
      classBox c = null ;
      if( ((String)argu) == "first")
      {st.insertClass(id, c) ;}
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      // String id1 = (String)
       n.f14.accept(this, argu);
      // {
      //   if( ((String)argu) == "second")
      //   {
      //       if(!id1.equals("int"))
      //       {
      //         st.typeerror() ;
      //       }
      //   }
      // }
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      this.cname = "";
      c = null;

      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String id = (String) n.f1.accept(this, argu);
      scope = 1 ;
      // create classBox
      classBox c = new classBox(id,null) ;
      this.cname = id ;
       this.currbox = c ;
       this.pname = null;
      //System.out.print(id);
      //System.out.print("\n");
      if( ((String)argu) == "first")
      {st.insertClass(id, c) ;}
      //st.printEle() ;
      //System.out.print(st.size());
      n.f2.accept(this, argu);
      //this.addToclass = true ;
      n.f3.accept(this, argu);
      // scope becomes 2 inside the functions
      scope = 2 ;
      //this.addToclass = false ;
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      scope = 0 ;
      this.cname = "";
      this.currbox = null ;
      return _ret;
   }


   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
     R _ret=null;
     scope = 1 ;
     n.f0.accept(this, argu);
     String child = (String) n.f1.accept(this, argu);
     this.cname = child ;
     n.f2.accept(this, argu);
     e = 1 ;
     String parent  = (String) n.f3.accept(this, argu);
     this.pname = parent ;
     classBox c = new classBox(child , parent) ;
     this.currbox = c ;
     if( ((String)argu) == "first")
     {
       st.insertClass(child , c ) ;
     }
     if(((String)argu) == "second")
     {

          //System.out.println("Inside Extends Class");
          if(!st.findClass(parent))
          {
                // parent class is valid ;
                st.typeerror() ;
          }
     }
     n.f4.accept(this, argu);
     n.f5.accept(this, argu);
     n.f6.accept(this, argu);
     n.f7.accept(this, argu);
     child = "";
     pname = "";
     e = 0 ;
     scope = 0 ;
     return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
     R _ret=null;
     String type = (String) n.f0.accept(this, argu);
     String id = (String)   n.f1.accept(this, argu);
     if( ((String)argu) == "first")
     {
       if(scope == 1 )
        {
          // adding variables to normal class
          // get the classBox name
           //classBox c = this.st.classList.get(cname);
           if(!currbox.varList.containsKey(id)) currbox.insertclassVar(id , type ) ;
           else st.typeerror();
        }
        else if ( scope == 2)
        {
            // adding variables to function
            //classBox c = this.st.classList.get(cname).funcList.get(fname);
            funcBox fb = this.st.classList.get(cname).funcList.get(fname);
            //funcBox fb = c.funcList.get(fname);
            if(!fb.funcVarList.containsKey(id))
            fb.insertfuncVar(id , type );
            else st.typeerror() ;

        }
     }
     if( ((String)argu) == "second" )
     {
          // check the type
          if( !( type.equals("int")  || type.equals("int[]") ||  type.equals("boolean") ) )
          {
                  // which means the type is an identifier type
                  // which means a class object is initalised of the form className oject
                  // check for the className exists or not
                  if( !this.st.findClass(type))
                  {
                       st.typeerror();
                  }
          }
     }
     n.f2.accept(this, argu);
     return _ret;
   }

   /**
    * f0 -> AccessType()
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
     R _ret=null;
     scope = 2 ;
     String ret = "" ;
     String access = (String) n.f0.accept(this, argu);
     String type = (String) n.f1.accept(this, argu);
     String id = (String) n.f2.accept(this, argu);
     this.fname = id ;
     funcBox fb = new funcBox(id,type) ;
     if( ((String)argu) == "first")
     {
       fb.insertAccessType(access) ;
       if(! (currbox.funcList.containsKey(id) ) )currbox.funcList.put(id,fb) ;
       else st.typeerror() ;
     }
     n.f3.accept(this, argu);
     n.f4.accept(this, argu);
     n.f5.accept(this, argu);
     n.f6.accept(this, argu);
     n.f7.accept(this, argu);
     n.f8.accept(this, argu);
     n.f9.accept(this, argu);
     // check the type of return Expression
     ret = (String)  n.f10.accept(this, argu);
     if(((String)argu) == "second")
     {
          if( !type.equals(ret) )
          {
              st.typeerror();
          }
     }
     n.f11.accept(this, argu);
     n.f12.accept(this, argu);

    scope = 1 ;
    this.fname = "";
     return _ret;
   }



   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
     R _ret=null;
     String type = "" ;
     String id = "";
     type = (String) n.f0.accept(this, argu);
     id = (String) n.f1.accept(this, argu);
     //System.out.println(cname + " " + fname );
     funcBox fb = this.st.classList.get(cname).funcList.get(fname);
     if( ((String)argu) == "first")
     {
       fb.insertParameter(id,type);
     }
     if(((String)argu) == "second" )
     {
           // fname gives the current function
           if( !(   type.equals("int") || type.equals("int[]") || type.equals("boolean") ) )
           {
                // if the type is none of the above
                // type can be an identifier of className
                // check if className is present
                if( !this.st.findClass(type))
                {
                      st.typeerror();
                }

           }

     }
     return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      String id = (String) n.f0.accept(this, argu);
      if(((String)argu) == "second")
      {
              // in the second parse we need to check whether the type identifier exists or not
              // here identifier is a className check whether it exists or not
              //System.out.println("\nFormal");
              if(n.f0.which == 3 )
              {
                if( !this.st.findClass(id))
                {
                    st.typeerror();
                }
              }
      }
      return (R) id ;

   }

   /**
    * f0 -> PublicType()
    *       | PrivateType()
    *       | ProtectedType()
    */
   public R visit(AccessType n, A argu) {
      R _ret=null;
      String id = (String) n.f0.accept(this, argu);
      return (R) id;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
        return (R) "int[]";
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R) "boolean";
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
    return (R) "int";
   }

   /**
    * f0 -> "public"
    */
   public R visit(PublicType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)  "public";
   }

   /**
    * f0 -> "private"
    */
   public R visit(PrivateType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R) "private";
   }

   /**
    * f0 -> "protected"
    */
   public R visit(ProtectedType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R) "protected";
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | tatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */

   public R visit(AssignmentStatement n, A argu){
      R _ret=null;
      String idtype = "" ;
      String id = (String) n.f0.accept(this, argu);
      // System.out.println(cname + " " + fname );
      // System.out.println("Statement1 : " + id );
       idtype = st.getType(id , cname , fname ) ;
       //System.out.println( idtype + " " + id );
      n.f1.accept(this, argu);
      String exp = (String) n.f2.accept(this, argu);
    //  System.out.println( idtype + " " + id + " " + exp );
        n.f3.accept(this, argu);
          if(((String)argu) == "second")
          {
              // if(st.getType(id,cname ,fname))
              // {
                //idtype = st.getType(id,cname , fname) ;
                //System.out.println(idtype + " " + exp );

                // pending
                //System.out.print("IN AssignmentStatement");
                if(!idtype.equals(exp))
                {
                    st.typeerror();
                }

          }

      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu){
    // System.out.print("IN array Assi");
      R _ret=null;
      String type = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String id = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String id1 = (String) n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        if(((String)argu) == "second")
        {
          // System.out.print("Statement2");
          if(!st.getType(type,cname,fname).equals("int[]"))
          {
            // System.out.print("In Aray AssignmentStatement");
            st.typeerror();
          }
          // System.out.println("\nStatement3");
          // System.out.println(id);
            if(!id.equals("int"))
            {
              // System.out.println("\nIn Aray AssignmentStatement");
              st.typeerror() ;
            }
          //  System.out.print("Are you there");
            //System.out.print("Statement4");
            if( !id1.equals("int"))
            {
              // System.out.print("In Aray AssignmentStatement");
              st.typeerror();
            }
        }
      return _ret;
   }
   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String id = (String)n.f2.accept(this, argu);
     if(((String)argu) == "second")
     {
       if(!id.equals("boolean"))
       {
        st.typeerror();
       }
     }

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String id = (String) n.f2.accept(this, argu);
      if(((String)argu) == "second")
      {
        if(!id.equals("boolean"))
        {
          st.typeerror();
        }
      }
      // if(!id.equals("boolean"))
      // {
      //   System.out.print("Type error ");
      // }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
    String id = (String) n.f2.accept(this, argu);
    if(((String)argu) == "second")
    {
      if( !id.equals("boolean"))
      {
        st.typeerror();
      }
    }

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
     //System.out.print("Print");
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
     String id = (String) n.f2.accept(this, argu);
      if(((String)argu) == "second")
      {

           //System.out.print(st.getType(id,cname,fname));
          //System.out.print(id);

          if(!id.equals("int"))
          {
            //System.out.print("Statement5");
            // if(!st.getType(id,cname,fname).equals("int"))
            // {
            //  System.out.print("From Print Statement");
              st.typeerror();
            // }

          }


      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | TernaryExpression()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      String id = (String ) n.f0.accept(this, argu);
      return (R) id ;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
     R _ret=null;
     String id1 = (String) n.f0.accept(this, argu);
     n.f1.accept(this, argu);
     String id2 = (String) n.f2.accept(this, argu);
     if( ((String)argu).equals("second") )
     {
       if( !id1.equals("boolean") || !id2.equals("boolean"))
       {
         // System.out.println("check error ");
         // System.exit(0) ;
         st.typeerror();
       }
       _ret = (R) "boolean" ;
     }
     return _ret ;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
     R _ret=null;
     String id1 = (String) n.f0.accept(this, argu);
     n.f1.accept(this, argu);
     String id2 = (String) n.f2.accept(this, argu);
     if( ((String)argu)  == "second")
     {
       if( !id1.equals("boolean") || !id2.equals("boolean"))
       {
         // System.out.println("ype check error ");
         // System.exit(0) ;
         st.typeerror();
       }
       _ret = (R) "boolean";
      // else return (R) "boolean" ;
     }
     return _ret ;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu)
   {
     R _ret=null;
     String id1 = (String) n.f0.accept(this, argu);
     n.f1.accept(this, argu);
     String id2 = (String) n.f2.accept(this, argu);
     //System.out.print(id1 + " " + id2 );
     if( ((String)argu).equals("second") )
     {
       if( !( (id1.equals("int") ) && ( id2.equals("int") ) ) )
       {
        st.typeerror();
       }
       //else return (R) "boolean" ;
       _ret = (R) "boolean";
     }
     return _ret ;

  }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {

     R _ret=null;
     String id1 = (String) n.f0.accept(this, argu);
     n.f1.accept(this, argu);
     String id2 = (String) n.f2.accept(this, argu);
     if( ((String)argu)  == "second")
     {
       //System.out.println(id1 + " " + id2 );
       // if the types are not equal typeerror
       // and types should be only int and boolean
       if( id1.equals("int") || id1.equals("boolean"))
       {
          if( id2.equals("int") || id2.equals("boolean") )
          {
                if(!id1.equals(id2) )
                {
                    st.typeerror();
                }
                else
                _ret = (R) "boolean";
          }
          else
          {
            st.typeerror();
          }
            //st.typeerror() ;
       }
       else {
        // System.out.print("neq");
         st.typeerror() ;}

     }
     return _ret ;
 }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      String id1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String id2 = (String) n.f2.accept(this, argu);

      if( ((String)argu)  == "second")
      {
        //System.out.print(id1 + " + " + id2 );
        if( !id1.equals("int") || !id2.equals("int"))
        {
        st.typeerror();
        }
        _ret =  (R) "int" ;
        return  _ret ;
      }
      return _ret ;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
     R _ret=null;
     String id1 = (String) n.f0.accept(this, argu);
     n.f1.accept(this, argu);
     String id2 = (String) n.f2.accept(this, argu);
     //System.out.print(" " + id1 + "-" + id2 + " ");
     if( ((String)argu)  == "second")
     {
       if( !id1.equals("int") || !id2.equals("int"))
       {
        st.typeerror();
       }
         _ret =  (R) "int" ;
         return _ret ;
     }
     return _ret ;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
     R _ret=null;
     String id1 = (String) n.f0.accept(this, argu);
     n.f1.accept(this, argu);
     String id2 = (String) n.f2.accept(this, argu);
     if( ((String)argu)  == "second")
     {
       // System.out.print('\n');
       // System.out.print(id1 + " times Expression " + id2 );
       // System.out.print('\n');
       if( id1.equals("int") &&  id2.equals("int"))
       {
         _ret =  (R) "int" ;

       }
       else
       {
        st.typeerror();
       }
     }
     return _ret ;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
     R _ret=null;
     String id1 = (String) n.f0.accept(this, argu);
     n.f1.accept(this, argu);
     String id2 = (String) n.f2.accept(this, argu);
     if( ((String)argu)  == "second")
     {
       if( !id1.equals("int") || !id2.equals("int"))
       {
         st.typeerror();
       }
       else return (R) "int" ;
     }
     return (R) "int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
    // returns an integer
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      String id1 = (String) n.f0.accept(this, argu);

      n.f1.accept(this, argu);
     String id2  = (String) n.f2.accept(this, argu);

      n.f3.accept(this, argu);
      if( ((String)argu)  == "second")
      {
         if( id1.equals("int[]") && id2.equals("int"))
         {
             // since arrayvalues is of integers
             // it returns an int
             _ret = (R)"int";
         }
         else
         {
          // System.out.print("arraylookup");
           st.typeerror();
         }
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;

      String type = (String) n.f0.accept(this, argu);
      if(((String)argu) == "second")
      {
          if( !type.equals("int[]"))
          {
              st.typeerror();
          }
          else
          {
             _ret = (R) "int";
          }
      }
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
    //  System.out.println("Inside MessageSend ");

       R _ret=null;
       String eArgs ;
       String clsname = (String) n.f0.accept(this, argu);
       String r ;
      n.f1.accept(this, argu);
      String funcname = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      //System.out.println(clsname + " " + funcname );
       // eArgs is null if the functions doesn't have arguments
       eArgs = (String) n.f4.accept(this, argu);
       // System.out.println("p\n");
       // System.out.println(eArgs);
       // System.out.println("p\n");
       //count++ ;
      //
      if( ( (String)argu ) == "second")
      {
        // System.out.println(funcname);
        // System.out.print("Inside Message");
        if(st.findClass(clsname))
        {
          if(st.isFuncPresent(clsname,funcname))
          {
                      // return type of the function
                      // System.out.println(cname);
                      // System.out.println(clsname);
                      // System.out.println(funcname);
                      if(!st.isAllowed(cname , clsname , funcname))
                      {
                            //System.out.println("Private test");
                            st.typeerror();
                      }
                     r = this.st.classList.get(clsname).funcList.get(funcname).rtype ;
                     //System.out.print("Return Type is " +  r);
                    _ret = (R) r ;
                    ArrayList<String>fargList = st.classList.get(clsname).funcList.get(funcname).paraTypeList;
                    String fargs[] = new String[fargList.size() ];
                    for (int j = 0; j < fargList.size(); j++)
                    {
                        fargs[j] = fargList.get(j) ;
                    }
                    if(eArgs == null)
                    {
                        if( fargList.size() != 0 )
                        {
                              //System.out.print("Invaild arg lengths ");
                              st.typeerror();
                        }
                        else
                        {
                          // System.out.print("Signatures match");
                            return  _ret ;
                        }
                    }
                    else
                    {

                        String expArgs[] = eArgs.split(",");
                       if(fargs.length != expArgs.length)
                       {
                         st.typeerror() ;
                       }
                       else
                       {
                         // for ( int i = 0 ; i < fargs.length ; i++  )
                         // {
                         //      System.out.print("Function arguments are " + fargs[i] + '\n');
                         //      System.out.print("Expression arguments are " + expArgs[i] + '\n');
                         // }
                         for ( int i = 0 ; i < fargs.length ; i++  )
                         {

                           if( !fargs[i].equals(expArgs[i]) )
                           {
                             // check if both fargs[i] and expArgs[i] are not int int[] boolean
                             if(!(fargs[i] == "int" || fargs[i] == "int[]" || fargs[i] == "boolean"))
                             {
                                  if(!(expArgs[i] == "int" || expArgs[i] == "int[]" || expArgs[i] == "boolean" ))
                                  {
                                        // both are classes
                                        // check whether expArgs[i] is a isSubClass of funcargs
                                        if(!st.isSubClass(expArgs[i] , fargs[i]))
                                        {
                                              st.typeerror() ;
                                        }
                                        //
                                        // else
                                        //   System.out.println("Type checked both the classes");
                                  }
                             }
                             else
                             {
                               //System.out.print("Message Send 2");
                               st.typeerror();
                             }
                           }

                         }
                       }
                 }
          }
          else
          {
              // function is not present in the current class
              // check if the function is present in the parent class
              String p = st.getParent(clsname);
              //System.out.println(p);
              while(p != null )
              {
                 //System.out.println("Inside");
                 if(st.isFuncPresent(p,funcname))
                 {
                      // check the access Type of the function
                      // System.out.println("INside cod");
                      // System.out.println(clsname + " " + funcname);
                      //System.out.println(this.st.classList.get(p).funcList.containsKey(funcname));
                      if( (st.classList.get(p).funcList.get(funcname).atype).equals("private") )
                      {
                          st.typeerror();
                      }
                      else
                      {
                            // if func is either private or public
                            // we can call the function
                           r = st.classList.get(p).funcList.get(funcname).rtype ;
                          _ret = (R) r ;
                          return _ret ;
                      }
                 }
                 p = st.getParent(p) ;
              }
              st.typeerror();
          }
        }
        else
        {
          //System.out.print("Message Send 4");
          st.typeerror() ;
        }
      }
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "?"
    * f2 -> PrimaryExpression()
    * f3 -> ":"
    * f4 -> PrimaryExpression()
    */
   public R visit(TernaryExpression n, A argu) {
      R _ret=null;
      // pending
      String condition = (String ) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exp1 = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      String exp2 = (String) n.f4.accept(this, argu);
      if(((String)argu) == "second")
      {
        if(!condition.equals("boolean"))
        {
              //System.out.print("In Ternary Expression");
              st.typeerror();
        }
        else if ( condition.equals("boolean") )
        {
           if( !exp1.equals(exp2))
           {
              // both are Expression are of different types
              //System.out.print("TE");
              st.typeerror() ;
           }
           else
           {
             // both are of same types
              if( exp1.equals("int") || exp1.equals("boolean"))
              {
                  // exp1 is valid
                  _ret = (R) exp1 ;
              }
              else
              {
                 // check if there is a type corresponding to identifer
                 // is there any classname
                 ;
              }
           }
        }
      }

      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */

   public R visit(ExpressionList n, A argu){
     // Get the arguments of the function or the expression
     // in the form of comma seperated strings
       R _ret = (R)"";
      String args = (String)n.f0.accept(this, argu);
      if(((String)argu).equals("second"))
      {
          if(n.f1.present())
          {
              for(int i=0;i<n.f1.size();++i)
              {
                  args = args + (String)n.f1.elementAt(i).accept(this, argu);
              }
          }
          _ret = (R)args;
      }
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu){
     R _ret=(R)"";
      String args = (String)n.f0.accept(this, argu);
      args = args + (String)n.f1.accept(this, argu);
      if(((String)argu).equals("second"))_ret = (R)args;
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu){
      R _ret=null;

      String id = (String) n.f0.accept(this, argu);
      // if it is identifier return the type of identifier and not identifer
      if(((String)argu) == "second")
      {
        if( n.f0.which == 3 )
        {
          //System.out.println(id);
          //String ty = st.getType(id,cname , fname ) ;
          //System.out.println(ty);
            //System.out.print("In Primary Expression");
            //System.out.print("Statement8");
            _ret = (R)  st.getType(id,cname , fname ) ;
        }
        else
        _ret = (R) id ;

      }
        return _ret ;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;

      //String num = (String)
      n.f0.accept(this, argu);
      return (R) "int" ;
   }


   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      String id = (String) n.f0.accept(this, argu);
      return (R) "boolean";
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R) "boolean";
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
     R _ret=null;
     String id = (String) n.f0.accept(this, argu);
     return (R) id ;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      // return the present class Name
      return (R) cname ;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String id = (String) n.f3.accept(this, argu);
        if(((String)argu) == "second")
        {
            if( !id.equals("int"))
            {
              st.typeerror() ;
            }
            else
            {
              return (R) "int[]";
            }
        }
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      String id = (String) n.f1.accept(this, argu);
        if(((String)argu) == "second")
        {
            if(st.classList.containsKey(id) )
            {
                // class i
                _ret =  (R) id ;
            }
            else
            {
              st.typeerror();
            }
        }
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String type = (String) n.f1.accept(this, argu);
        if(((String)argu) == "second")
        {
          if(!type.equals("boolean"))
          {
              st.typeerror() ;
          }
          else
            return (R) "boolean";

        }
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String type = (String) n.f1.accept(this, argu);
      if(((String)argu) == "second")
      {
             _ret =  (R) type ;
      }
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
