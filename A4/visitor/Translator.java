//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */

public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //

   SymbolTable st = new SymbolTable() ;
   funcBox currFuncBox ;
   String currFunc ;
   int global = 0 ;
   //String currReg = null ;

   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }
   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R) n.tokenImage; }



   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      String main = (String) n.f0.accept(this, (A) "first");

        funcBox fb = new funcBox( main , 0 ) ;
            st.funcList.put(main , fb ) ;
        this.currFunc = main ;
        this.currFuncBox = fb ;
          global++ ;

      n.f1.accept(this,  (A) "first" );
      n.f2.accept(this,(A) "first" );
      n.f3.accept(this, (A) "first" );
      n.f4.accept(this, (A) "first" );
      //this.st.printTable() ;

      n.f0.accept(this, (A) "second" );
      this.currFunc = main ;
      this.currFuncBox = st.funcList.get(main) ;
      n.f1.accept(this, (A) "second" );
      n.f2.accept(this, (A) "second" );

        // System.out.println("leftTempMap is : " + this.st.funcList.get(currFunc).leftTempMap ) ;
        // System.out.println("rightTempMap is :" + this.st.funcList.get(currFunc).rightTempMap);
        currFuncBox.LinearScan(this.st.funcList.get(currFunc).leftTempMap,this.st.funcList.get(currFunc).rightTempMap);
        // System.out.println("usedRegMap for main is : " + currFuncBox.usedRegMap);
        // System.out.println("Live regMap is : " + currFuncBox.regMap);

      n.f3.accept(this, (A) "second" );
      n.f4.accept(this, (A) "second" );


      n.f0.accept(this, (A) "third");
      System.out.println("MAIN [0]" + "[" + "10" + "]" + "[" + this.st.funcList.get(currFunc).maxArg + "]");
      this.currFunc = main ;
      this.currFuncBox = st.funcList.get(main) ;
      n.f1.accept(this,  (A)"third");
      n.f2.accept(this,(A) "third");
      System.out.println("END");
      System.out.println();
      n.f3.accept(this, (A) "third");
      n.f4.accept(this, (A) "third");

      return _ret;
   }


   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }
   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      global = 0 ;
      String id = null ;
      if(  ((String)argu) == "first" || ((String)argu) == "second" )
       id = (String) n.f0.accept(this, argu);
      if(  ((String)argu) == "third") id = (String) n.f0.accept(this, (A) "lbl" );
      //if(((String)argu) == "third")System.out.print(id+" ");
      n.f1.accept(this, argu);
      String argCount = (String) n.f2.accept(this, argu);
      int argc = Integer.parseInt(argCount) ;
      funcBox fb = null ;
      if(((String)argu) == "first")
      {
        fb = new funcBox( id,argc ) ;
        st.funcList.put(id , fb ) ;
        this.currFunc =  id ;
        this.currFuncBox = fb ;
      }

      currFuncBox.argcount = argc ;

      n.f3.accept(this, argu);
      if(((String)argu) == "third")
      {
        if(st.funcList.get(currFunc).sFlag == true && st.funcList.get(currFunc).tFlag == false )
        {
            st.funcList.get(currFunc).stkCnt = 8 ;
        }
        if(st.funcList.get(currFunc).sFlag == true && st.funcList.get(currFunc).tFlag == true )
        {
            st.funcList.get(currFunc).stkCnt = 18 ;
        }
        System.out.print("[" + argc + "] " + "["+ st.funcList.get(currFunc).stkCnt +  "]" + "[" + currFuncBox.maxArg + "]\n");

      }
      if(((String)argu) == "third")
      {
        this.currFunc =  id ;
        this.currFuncBox = st.funcList.get(currFunc) ;
      }
      n.f4.accept(this, argu);
      //System.out.println();]
      if(((String)argu) == "second")
      {
        // System.out.println("leftTempMap is : " + this.st.funcList.get(currFunc).leftTempMap ) ;
        // System.out.println("rightTempMap is :" + this.st.funcList.get(currFunc).rightTempMap);
        this.currFunc =  id ;
        this.currFuncBox = st.funcList.get(currFunc) ;
        currFuncBox.LinearScan(this.st.funcList.get(currFunc).leftTempMap,this.st.funcList.get(currFunc).rightTempMap);
       // System.out.println("usedRegMap for "+ currFunc+ " " + currFuncBox.usedRegMap);
       // System.out.println("Live regMap for " + currFunc + " " + currFuncBox.regMap);
      }


      return _ret;
   }
   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if( ((String)argu) == "third")System.out.println("NOOP");
      return _ret;
   }
   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if( ((String)argu) == "third")System.out.print("CJUMP ");
      String tmp = (String) n.f1.accept(this, argu);
      global++ ;

    if( ((String)argu) == "first")
    {
      int num = Integer.parseInt(tmp) ;
       if( !st.funcList.get(currFunc).leftTempMap.containsKey(num) )
       {
           st.funcList.get(currFunc).leftTempMap.put(num , global) ;
       }
       else
       {
         st.funcList.get(currFunc).rightTempMap.put(num , global) ;
       }
    }
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if(((String)argu) == "third")System.out.print("JUMP ");
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
        if(((String)argu) == "third"){ System.out.print("HSTORE ");}
      String temp1 = (String) n.f1.accept(this, argu);

      String str = (String) n.f2.accept(this, argu);
        if(((String)argu) == "third")System.out.print(str+" ");
      String temp2 = (String) n.f3.accept(this, argu);
        if(((String)argu) == "third"){ System.out.println();}
    //  int num2 = Integer.parseInt(temp2) ;
      if(((String)argu) == "first")
      {
        int num1 = Integer.parseInt(temp1) ;
        int num2 = Integer.parseInt(temp2) ;
         global++ ;
        if( !st.funcList.get(currFunc).leftTempMap.containsKey(num1) )
        {
            st.funcList.get(currFunc).leftTempMap.put(num1, global) ;
        }
       if(  st.funcList.get(currFunc).leftTempMap.containsKey(num1) )
        {

          st.funcList.get(currFunc).rightTempMap.put(num1 , global) ;
        }

        if( !st.funcList.get(currFunc).leftTempMap.containsKey(num2) )
        {
            st.funcList.get(currFunc).leftTempMap.put(num2, global) ;
        }
       if(  st.funcList.get(currFunc).leftTempMap.containsKey(num2) )
        {
          st.funcList.get(currFunc).rightTempMap.put(num2 , global) ;
        }

      }
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if(((String)argu) == "third")System.out.print("HLOAD ");
      String temp1 = (String) n.f1.accept(this, argu);

      String temp2 = (String) n.f2.accept(this, argu);

      if(((String)argu) == "first")
      {
        int num1 = Integer.parseInt(temp1) ;
          int num2 = Integer.parseInt(temp2) ;
         global++ ;
        if( !st.funcList.get(currFunc).leftTempMap.containsKey(num1) )
        {
            st.funcList.get(currFunc).leftTempMap.put(num1, global) ;
        }
       if(  st.funcList.get(currFunc).leftTempMap.containsKey(num1) )
        {

          st.funcList.get(currFunc).rightTempMap.put(num1 , global) ;
        }

        if( !st.funcList.get(currFunc).leftTempMap.containsKey(num2) )
        {
            st.funcList.get(currFunc).leftTempMap.put(num2, global) ;
        }
       if(  st.funcList.get(currFunc).leftTempMap.containsKey(num2) )
        {
          st.funcList.get(currFunc).rightTempMap.put(num2 , global) ;
        }

      }
      String val = (String) n.f3.accept(this, argu);
      if(((String)argu) == "third")
      {
         System.out.print(val);
         System.out.println();
      }
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */

   public R visit(MoveStmt n, A argu) {
      R _ret=null;

      n.f0.accept(this, argu);
      if( ((String)argu) == "third")
      {
        System.out.print("MOVE ");
        String temp = (String) n.f1.accept(this, argu);
      //  System.out.println("TEMP INSId MOVE us " + temp );
          global++ ;
          String exp =(String) n.f2.accept(this, (A) temp);
          //System.out.print("EXp  is " + exp);
         // System.out.println();
      }



      if( ((String)argu) == "first")
      {
         //System.out.println("currFunc is : " + currFunc);
         String temp = (String) n.f1.accept(this, argu);
         int num = Integer.parseInt(temp) ;
           global++ ;

         if( !st.funcList.get(currFunc).leftTempMap.containsKey(num) )
         {
             st.funcList.get(currFunc).leftTempMap.put(num , global) ;
         }
         else
         {
           st.funcList.get(currFunc).rightTempMap.put(num , global) ;
         }
         n.f2.accept(this, argu);
      }

      if( ((String)argu) == "third") System.out.print('\n');


      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      global++ ;
      n.f0.accept(this, argu);
      if( ((String)argu) == "third") {System.out.print("PRINT ");}
      String temp = (String) n.f1.accept(this, argu);
        //if( ((String)argu) == "third") {System.out.println();}
      _ret = (R) temp ;
      return _ret;
   }
   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      String id = null ;
      if(((String)argu) == "first" || ((String)argu) == "second" )
      {
         id = (String) n.f0.accept(this, argu);

        if( n.f0.which == 1 )
        {
            _ret = (R) id ;
            return _ret ;
        }
        if( n.f0.which == 3 )
        {
          _ret = (R) id ;
          return _ret ;
        }

      }
      else
      {
        if( n.f0.which == 0 )
        {
           id = (String) n.f0.accept(this, argu);
        }
        else
        {
          id = (String) n.f0.accept(this,(A) "third");

        }
        if( n.f0.which == 1 )
        {
            _ret = (R) id ;
            return _ret ;
        }
        if( n.f0.which == 3 )
        {
          _ret = (R) id ;
          return _ret ;
        }
      }


      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()MP
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */

   public R visit(StmtExp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

        /*
        Push the arg registers and update the left counts to 0
        Before calling every function push the arguments to the available registers
        */
        if( ((String)argu) == "first")
        {
           //System.out.println("currFunc is : " + currFunc);
           for(int i = 0 ; i < st.funcList.get(currFunc).argcount ; i++ )
           {
             if( !st.funcList.get(currFunc).leftTempMap.containsKey(i) )
             {
                 st.funcList.get(currFunc).leftTempMap.put(i , global) ;
             }
             else
             {
               st.funcList.get(currFunc).rightTempMap.put(i, global) ;
             }
           }
        }
          if( ((String)argu) == "third")
          {
            for(int i=0;i<=7;i++)
            {
                  System.out.println("ASTORE SPILLEDARG "+ i + " "+st.funcList.get(currFunc).regS[i]);
              }
              for(int i = 0 ; i < st.funcList.get(currFunc).argcount ; i++  )
              {
                String str1 = st.funcList.get(currFunc).usedRegMap.get(i) ;
                 System.out.println("MOVE " + str1 + " " + st.funcList.get(currFunc).argRegSet[i]);
              }
          }

      n.f1.accept(this, argu);
      global++;
      n.f2.accept(this, argu);
      if(((String)argu) == "third")
      {
       System.out.print("MOVE v0 ");
      }
      n.f3.accept(this, argu);
      System.out.println();
      if( ((String)argu) == "third")
      {
        for(int i=0;i<=7;i++)
        {
              // ALOAD s0 SPILLEDARG 0
              System.out.println("ALOAD "+ st.funcList.get(currFunc).regS[i] + " SPILLEDARG " +  i );
          }
      }
      n.f4.accept(this, argu);
        if(((String)argu) == "third")System.out.println("END");
        // Load all the spilled values

      return _ret;
   }
   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */

   public R visit(Call n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if( ((String)argu) == "first")
      {
        String tmp = (String) n.f1.accept(this, argu);
        //System.out.println("Inside call tmp is " + tmp );
          int num = Integer.parseInt(tmp) ;
         if( !st.funcList.get(currFunc).leftTempMap.containsKey(num) )
         {
             st.funcList.get(currFunc).leftTempMap.put(num , global) ;
         }
         else
         {
           st.funcList.get(currFunc).rightTempMap.put(num , global) ;
         }
      }
      n.f2.accept(this, argu);
      String args = " ";
      if(((String)argu).equals("first"))
     {
         if(n.f3.present())
         {
             for(int i=0;i<n.f3.size();++i)
             {
                 args = args +" "+ (String)n.f3.elementAt(i).accept(this, argu);
             }
         }

     StringTokenizer st1 = new StringTokenizer(args, " ");
     int t = 0 ;
        while (st1.hasMoreTokens())
        {

          t = t+ 1 ;
          ////st.funcList.get(currFunc).maxArg += 1 ;
          String str = st1.nextToken() ;
          //System.out.println(str);
          int num1 = Integer.parseInt(str) ;
          if( !st.funcList.get(currFunc).leftTempMap.containsKey(num1) )
          {
              st.funcList.get(currFunc).leftTempMap.put(num1, global) ;

          }
          else
          {
            st.funcList.get(currFunc).rightTempMap.put(num1, global) ;
          }

        }
        if(t > st.funcList.get(currFunc).maxArg)
        {
          st.funcList.get(currFunc).maxArg = t ;
        }
        //System.out.println("maxArg for  " + currFunc + " : " + st.funcList.get(currFunc).maxArg);
    }
    else
    {
      if(((String)argu) == "second")
      {}
        else
        {
            String tmp = (String) n.f1.accept(this, (A) "fourth");
            if(n.f3.present())
            {
                for(int i=0;i<n.f3.size();++i)
                {
                    args = args +" "+ (String)n.f3.elementAt(i).accept(this, (A) "Call");
                }
            }
            // String exp = (String) n.f3.accept(this, argu);
            // System.out.println("exp is : " + exp );
        if(args!=null)
        {
            int count = -1 ;
            StringTokenizer st1 = new StringTokenizer(args, " ");
            System.out.println();
               while (st1.hasMoreTokens())
               {
                   count++ ;

                 //st.funcList.get(currFunc).maxArg += 1 ;
                 String str = st1.nextToken() ;
                 int num1 = Integer.parseInt(str) ;
                 String str1 = st.funcList.get(currFunc).usedRegMap.get(num1) ;
                 if(str1 == null )
                 {
                   //System.out.println("In regMap " + currFuncBox.regMap.get(num));
                   str1 = currFuncBox.regMap.get(num1) ;
                 }
                 System.out.println("MOVE " + st.funcList.get(currFunc).argRegSet[count] + " " + str1 );

               }
        }
           //System.out.println("maxArg for  " + currFunc + " : " + st.funcList.get(currFunc).maxArg);


         System.out.print("CALL " );
         //System.out.println("tmp is " + tmp );
        // int num1 = Integer.parseInt(tmp) ;
         String str1 = tmp  ;
         // if(str1 == null )
         // {
         //   //System.out.println("In regMap " + currFuncBox.regMap.get(num));
         //   str1 = currFuncBox.regMap.get(num1) ;
         // }
           System.out.println(str1 );

           //System.out.println("MOVE " + freeReg + " v0 ");
           System.out.print("MOVE " + argu + " v0 \n");
           n.f4.accept(this, argu);
           return _ret;
        }

    }

   return _ret ;
 }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if( ((String)argu) == "third")
      {
        // String str = st.funcList.get(currFunc).usedRegMap.get(num) ;
        // if(str == null )
        // str = currFuncBox.regMap.get(num) ;
        System.out.print(" HALLOCATE ");

      }
      String tmp = (String) n.f1.accept(this, argu);

      if( ((String)argu) == "first")
      {
          int num = Integer.parseInt(tmp) ;
         if( !st.funcList.get(currFunc).leftTempMap.containsKey(num) )
         {
             st.funcList.get(currFunc).leftTempMap.put(num , global) ;
         }
         else
         {
           st.funcList.get(currFunc).rightTempMap.put(num , global) ;
         }
      }

      _ret = (R) tmp ;
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      String op = (String)n.f0.accept(this, argu);
      if(((String)argu) == "third")System.out.print(op+" ");
      String tmp = (String) n.f1.accept(this, argu);

      if(((String)argu) == "first")
      {
        int num = Integer.parseInt(tmp) ;
        if( !st.funcList.get(currFunc).leftTempMap.containsKey(num) )
        {
            st.funcList.get(currFunc).leftTempMap.put(num , global) ;
        }
        else
        {
          st.funcList.get(currFunc).rightTempMap.put(num , global) ;
        }
      }
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      String str = (String) n.f0.accept(this, argu);
      _ret = (R) str ;
      return _ret;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;

      String simpExp = (String) n.f0.accept(this, argu);

      if( ( (String)argu )  == "first")
      {
        if(n.f0.which == 0 )
        {
            // Temp()
            int num = Integer.parseInt(simpExp) ;
            if( !st.funcList.get(currFunc).leftTempMap.containsKey(num) )
            {
                st.funcList.get(currFunc).leftTempMap.put(num , global) ;
            }
            else
            {
              st.funcList.get(currFunc).rightTempMap.put(num , global) ;
            }

        }

      }
      if( ( (String)argu )  == "third")
      {


          if(n.f0.which == 1 )
          {

              System.out.print(" " + simpExp);
          }


      }
      _ret = (R) simpExp ;
      return _ret;
   }


   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;
    n.f0.accept(this, argu);
      String temp_num = (String) n.f1.accept(this, argu);
      int num = Integer.parseInt(temp_num) ;
      _ret = (R) temp_num ;
        if(((String)argu) == "third")
        {

          String str = st.funcList.get(currFunc).usedRegMap.get(num) ;
          if(str == null )
          str = currFuncBox.regMap.get(num) ;
          System.out.print(str + " ");
          _ret = (R) str ;
        }
        else if (((String)argu) == "Call")
        {
          // DO NOTHING
             ;
        }
        else if (((String)argu) == "fourth")
        {
          String str = st.funcList.get(currFunc).usedRegMap.get(num) ;
          if(str == null )
          str = currFuncBox.regMap.get(num) ;
          _ret = (R) str ;
        }
      return _ret ;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
       String temp = (String ) n.f0.accept(this, argu);
      return (R) temp ;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      String func = (String) n.f0.accept(this, argu);
      if(((String)argu) == "third")System.out.println(func+" ");
      if(((String)argu) == "lbl"){System.out.print(func + " ");}
      return (R) func ;
   }

}
