//
// Generated by JTB 1.3.2
//
// References
// http://compilers.cs.ucla.edu/jtb/jtb-2003/docs.html
// https://www.geeksforgeeks.org/strings-in-java/
// Lab sessions and videos
// https://javarevisited.blogspot.com/2015/12/how-to-split-comma-separated-string-in-java-example.html#axzz76udcxjdm

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A>{
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   SymbolTable st = new SymbolTable() ;
   // current string name
   String cname = null ;
   int class_record ;
   // current function name
   String fname ;
   int currnum ;
   String currstring ;
   // current parent name
   String pname ;
   int scope = 0 ;
   int func_odr ;
   String currclass ;
   int e = 0 ;
   int func_cnt ;
   int clsVarcnt ;
   ArrayList<String>expList = new ArrayList<String>() ;
   int temp_cnt = 100 ;
   int lbl = 0 ;
   //int l ;
   // String list1 = "";
   // String list2 = "";
   // gives the current classBox
   public classBox currbox ;

   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }


   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R) n.tokenImage;  }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu ){
      R _ret=null;

      // for the first parse build the symbol table
      // setting argu = "first" for first parse
      n.f0.accept(this, (A) "first" );
      n.f1.accept(this,(A) "first"  );
      n.f2.accept(this, (A) "first" );
      //this.st.printTable() ;
      // for the second parse do type checking
      // setting argu = "second" for second parse
      n.f0.accept(this, (A) "second" );
      n.f1.accept(this,(A) "second"  );
      n.f2.accept(this, (A) "second" );

      //System.out.println("Program type checked successfully");
    //  System.out.print('\n');
      return _ret;
   }
   /**
    * f0 -> "'\n'class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> tatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu){

      // System.out.println(cname + " AB ");
      // System.out.println(fname + " AB");
      R _ret=null;
      n.f0.accept(this, argu);
      String id = (String) n.f1.accept(this, argu);
      this.cname = id ;
      currstring = id ;
      classBox c = null ;
      if( ((String)argu) == "first")
      {
        st.insertClass(id, c) ;
      }
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      if( ((String)argu) == "second")
      {
          System.out.println("MAIN");
      }
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
       n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      class_record = 0 ;
      if( ((String)argu) == "second")
      {
          System.out.println("END");
      }
      this.cname = "";
      c = null;

      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String id = (String) n.f1.accept(this, argu);
      currstring = id  ;
      scope = 1 ;
      classBox c = new classBox(id,null) ;
      this.cname = id ;
       this.currbox = c ;
       this.pname = null;
       clsVarcnt = 0  ;
       func_cnt = 0 ;
      if( ((String)argu) == "first")
      {st.insertClass(id, c) ;}
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      scope = 2 ;
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      class_record = 0 ;
      scope = 0 ;
      this.cname = "";
      this.currbox = null ;
      return _ret;
   }


   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
     R _ret=null;
     scope = 1 ;
     n.f0.accept(this, argu);

     String child = (String) n.f1.accept(this, argu);
     currstring = child ;
     scope = 1 ;
     classBox c = new classBox(child ,null) ;
     this.cname = child ;
      this.currbox = c ;
      this.pname = null;
      clsVarcnt = 0  ;
      func_cnt = 0 ;
     if( ((String)argu) == "first")
     {st.insertClass(child, c) ;}
     n.f2.accept(this, argu);
     String parent  = (String) n.f3.accept(this, argu);
     this.pname = parent ;
     // classBox c = new classBox(child , parent) ;
     // this.currbox = c ;
     if( ((String)argu) == "first")
     {
       //st.insertClass(child , c ) ;
       for(Map.Entry <String , String> cvi : st.classList.get(parent).varList.entrySet())
       {
          currbox.insertclassVar(cvi.getKey() , cvi.getValue());
       }
       for(Map.Entry <String , Integer> cvi : st.classList.get(parent).clsVarOrd.entrySet())
       {

          currbox.clsVarOrd.put(cvi.getKey() , cvi.getValue() );
       }
     }
     n.f4.accept(this, argu);
     n.f5.accept(this, argu);
     n.f6.accept(this, argu);
     n.f7.accept(this, argu);
     child = "";
     pname = "";
     e = 0 ;
     scope = 0 ;
     return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */

   public R visit(VarDeclaration n, A argu) {
     R _ret=null;
     String type = (String) n.f0.accept(this, argu);
     String id = (String)   n.f1.accept(this, argu);
     currstring = id ;
     if( ((String)argu) == "first")
     {
       if(scope == 1 )
        {
          // adding variables to normal class
          // get the classBox name
           //classBox c = this.st.classList.get(cname);
           if(!currbox.varList.containsKey(id))
           {
             clsVarcnt +=1 ;
             currbox.insertclassVar(id , type ) ;
             currbox.clsVarOrd.put(id , clsVarcnt ) ;
           }
           //else st.typeerror();
        }
        else if ( scope == 2)
        {
            // adding variables to function
            //classBox c = this.st.classList.get(cname).funcList.get(fname);
            funcBox fb = this.st.classList.get(cname).funcList.get(fname);
            //funcBox fb = c.funcList.get(fname);
            if(!fb.funcVarList.containsKey(id))
            {
              temp_cnt++ ;
              fb.insertfuncVar(id , type );
              fb.funcVarOrdList.put(id , temp_cnt);
            }
            //else st.typeerror() ;

        }
     }
     // if( ((String)argu) == "second" )
     // {
     //
     // }
     n.f2.accept(this, argu);
     return _ret;
   }

   /**
    * f0 -> AccessType()
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
     R _ret=null;
     scope = 2 ;
     String ret = "" ;
     String access = (String) n.f0.accept(this, argu);
     String type = (String) n.f1.accept(this, argu);
     String id = (String) n.f2.accept(this, argu);
     currstring = id ;
     this.fname = id ;
     funcBox fb = new funcBox(id,type) ;
     func_odr=0;
     if( ((String)argu) == "first")
     {
       fb.insertAccessType(access) ;
       func_cnt++ ;
       if(! (currbox.funcList.containsKey(id) ) )
       {

         currbox.funcList.put(id,fb) ;
         currbox.funcOrdList.put(func_cnt,id) ;
         currbox.funcRevList.put(id,func_cnt);
         fb.funcParList.put(cname,func_odr);
       }
     }

     if(((String)argu) == "second")
     {
       int siz = st.classList.get(cname).funcList.get(fname).paraList.size();
       System.out.println(cname+"_"+fname+" "+"["+ (siz+1) +"]");
       System.out.println("BEGIN");
     }
     n.f3.accept(this, argu);
     n.f4.accept(this, argu);
     n.f5.accept(this, argu);
     n.f6.accept(this, argu);
     n.f7.accept(this, argu);
     n.f8.accept(this, argu);

     n.f9.accept(this, argu);

     ret = (String)  n.f10.accept(this, argu);
      if(((String)argu) == "second")
      {
          System.out.println("RETURN TEMP " + ret );
      }
     n.f11.accept(this, argu);
     n.f12.accept(this, argu);
     if(((String)argu) == "second")System.out.println("END");
    scope = 1 ;
    this.fname = "";
     return _ret;
   }



   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
     R _ret=null;
     String type = "" ;
     String id = "";
     type = (String) n.f0.accept(this, argu);
     id = (String) n.f1.accept(this, argu);
     currstring = id ;
     funcBox fb = this.st.classList.get(cname).funcList.get(fname);
     if( ((String)argu) == "first")
     {
       func_odr++;
       fb.insertParameter(id,type);
       fb.funcParList.put(id,func_odr);
     }
     return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      String id = (String) n.f0.accept(this, argu);
      return (R) id ;

   }

   /**
    * f0 -> PublicType()
    *       | PrivateType()
    *       | ProtectedType()
    */
   public R visit(AccessType n, A argu) {
      R _ret=null;
      String id = (String) n.f0.accept(this, argu);
      return (R) id;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
        return (R) "int[]";
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R) "boolean";
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
    return (R) "int";
   }

   /**
    * f0 -> "public"
    */
   public R visit(PublicType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)  "public";
   }

   /**
    * f0 -> "private"
    */
   public R visit(PrivateType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R) "private";
   }

   /**
    * f0 -> "protected"
    */
   public R visit(ProtectedType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R) "protected";
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | tatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */

   public R visit(AssignmentStatement n, A argu){
      R _ret=null;
      String idtype = "" ;
      String id = (String) n.f0.accept(this, argu);
       idtype = st.getType(id , cname , fname ) ;
      n.f1.accept(this, argu);
      String exp = (String) n.f2.accept(this, argu);
      if(((String)argu) == "second")
      {
          if(st.classList.get(cname).funcList.get(fname).funcVarList.containsKey(id))
          {
             int fvar = st.classList.get(cname).funcList.get(fname).funcVarOrdList.get(id);
             System.out.println("MOVE TEMP " + fvar + " " + " TEMP " + exp );
          }
          else if( st.classList.get(cname).funcList.get(fname).paraList.contains(id))
          {
            int ftemp = st.classList.get(cname).funcList.get(fname).funcParList.get(id) ;
            //temp_cnt++ ;
            System.out.println("MOVE TEMP " + ftemp + " " + " TEMP " + exp );
          }
          else if(st.classList.get(cname).varList.containsKey(id))
          {
             int cvar = st.classList.get(cname).clsVarOrd.get(id);
             String classid = st.getType(id,cname,fname);
             //System.out.println("**********");
             System.out.println("HSTORE TEMP " + " 0 " + " " + cvar*4 + " TEMP " + exp );
            //System.out.println("**********");
          }
          else
          {
             // it belongs to the parent class

          }
      }
        n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu){

      R _ret=null;
      int num = 0 ;
      String id= (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exp = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String id2 = (String) n.f5.accept(this, argu);

        int cvar = 0 ;
      if(((String)argu) == "second")
      {
        try{
          num = Integer.parseInt(exp);
          if(st.classList.get(cname).funcList.get(fname).funcVarList.containsKey(id))
          {
                  int ftemp = st.classList.get(cname).funcList.get(fname).funcVarOrdList.get(id);
                  //temp_cnt++ ;
                  cvar = ftemp ;
                  //return (R) Integer.toString(ftemp);
           }
          else if( st.classList.get(cname).funcList.get(fname).paraList.contains(id))
          {
            int ftemp = st.classList.get(cname).funcList.get(fname).funcParList.get(id) ;
            //temp_cnt++ ;
            cvar = ftemp ;
           //return (R) Integer.toString(ftemp);
          }
          else if( st.classList.get(cname).varList.containsKey(id))
          {

            int ftemp = st.classList.get(cname).clsVarOrd.get(id);
            temp_cnt++ ;
            int tmp = temp_cnt ;
          //  System.out.println("In ArrayAssignmentStatement");
            System.out.println("HLOAD " + " TEMP " + temp_cnt + " TEMP 0 " + (ftemp)*4);
            temp_cnt++;
            System.out.println("MOVE TEMP " + temp_cnt + " PLUS " + " TEMP " + exp + " 1 ");
            temp_cnt++;
            System.out.println("MOVE TEMP " + temp_cnt + " TIMES " + " TEMP " + (temp_cnt-1) + " 4 ");
            temp_cnt++;
          //  System.out.println("*******");
            System.out.println(" MOVE TEMP " + temp_cnt + " PLUS " + " TEMP " + tmp + " TEMP " + (temp_cnt-1));
            //System.out.println("*******");
            System.out.println("HSTORE TEMP " + temp_cnt + " 0 " + " TEMP " + id2 );
            // MOVE TEMP 101  PLUS TEMP f2 1
            // MOVE TEMP 102 TIMES TEMP 101 4
            // MOVE TEMP 103 PLUS TEMP f0 TEMP 102
            // HSTORE TEMP 103 0 TEMP f5

            cvar = temp_cnt ;
           //return (R) Integer.toString(temp_cnt);
          }


         // temp_cnt++;
         //
         //  int t1 = temp_cnt ;
         //  System.out.println("HSTORE TEMP " + cvar + " TEMP " + exp + " TEMP " + id2  );

          n.f6.accept(this, argu);
          return _ret  ;

        }
        catch(Exception e)
        {
            // if exp is identifier
            System.out.println(" Expression is an identifier ");

        }
      }
        n.f6.accept(this, argu);
        return _ret;
   }
   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
     R _ret=null;
     int iflabel = 0 ;
     n.f0.accept(this, argu);
     n.f1.accept(this, argu);
     String id = (String)n.f2.accept(this, argu);
     if(((String)argu) == "second")
     {
         lbl ++ ;
          iflabel = lbl ;
         System.out.println("CJUMP TEMP " + temp_cnt + " "+ "L"+iflabel );

     }
     n.f3.accept(this, argu);
     n.f4.accept(this, argu);
     if(((String)argu) == "second")
     {
       System.out.println("L"+iflabel + " NOOP");
     }

     return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {

     int l = 0 ;
     int tp = 0 ;
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String id = (String) n.f2.accept(this, argu);
      if(((String)argu) == "second")
      {
          lbl++ ;
          l= lbl;
          System.out.println("CJUMP TEMP " + id + " " +  " L"+l);
      }
      n.f3.accept(this, argu);
      //System.out.println();
      n.f4.accept(this, argu);
      if(((String)argu) == "second")
      {
          lbl++ ;
          tp = lbl ;
          System.out.println("JUMP L"+lbl);
      }

      n.f5.accept(this, argu);
      if(((String)argu) == "second")
      {
          lbl++ ;
          System.out.println("L"+l);
      }
      n.f6.accept(this, argu);
      if(((String)argu) == "second")
      {
          l++ ;
          System.out.println("L"+tp);
          System.out.println("NOOP");
      }

      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;

        int l1 = 0 , l2 = 0  ;
        if(((String)argu) == "second")
        {
          lbl++ ;
           l1 = lbl ;
          System.out.println("L"+l1);
        }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
    String id = (String) n.f2.accept(this, argu);

      n.f3.accept(this, argu);

      if(((String)argu) == "second")
      {
        temp_cnt ++ ;
        int res = temp_cnt;
        System.out.println("MOVE TEMP "+ temp_cnt + " 0");
        // if value in temp_cnt = 2 return 1
        temp_cnt++ ;

        //System.out.println("L"+lbl);
        int r = temp_cnt ;
        System.out.println("MOVE TEMP " + temp_cnt + " NE " + "TEMP "+ id + " TEMP " + res );
        lbl++ ;
        l2 = lbl;
        System.out.println("CJUMP " + " TEMP " + r + " "+ "L"+l2);
        //temp_cnt++ ;
        n.f4.accept(this, argu);
        System.out.println("JUMP L"+l1);
        System.out.println("L"+l2 + " NOOP");
        return _ret ;
      }
      String exp = (String) n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
     String id = (String) n.f2.accept(this, argu);
     if(((String)argu) == "second")
     {

        System.out.println("PRINT TEMP " + id );
     }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | TernaryExpression()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      String id = (String ) n.f0.accept(this, argu);
      return (R) id ;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
     R _ret=null;
     String id1 = (String) n.f0.accept(this, argu);
     n.f1.accept(this, argu);
     String id2 = (String) n.f2.accept(this, argu);
     if(((String)argu) == "second")
     {
       int num1 = Integer.parseInt(id1);
       int num2 = Integer.parseInt(id2);
       temp_cnt++;
       int first = temp_cnt;
       System.out.println("MOVE TEMP "+temp_cnt + " TEMP " + id1);

       temp_cnt++;
        int second = temp_cnt ;
       System.out.println("MOVE TEMP "+temp_cnt + " TEMP " + id2);
       // temp first and temp second have the present values of p1 and p2
       temp_cnt++;
       System.out.println("MOVE TEMP " + temp_cnt + " " + "PLUS" + " TEMP " + first + " TEMP " + second );
       int res = temp_cnt;
       // if value in temp_cnt = 2 return 1
       temp_cnt++ ;
       int r = temp_cnt ;
       System.out.println("MOVE TEMP " + temp_cnt + " NE " + "TEMP " + res + " 2");
       lbl++ ;
       System.out.println("CJUMP " + " TEMP " + r+ " " + "L"+lbl);
       temp_cnt++ ;

       System.out.println("MOVE TEMP " + temp_cnt + " 0 ");
       int label = ++lbl ;
       System.out.println("JUMP " + "L"+label);
       System.out.println("L"+(lbl-1));
       System.out.println("MOVE TEMP " + temp_cnt + " 1 ");
       System.out.println("L"+label+" NOOP");
       // else return 0
       return (R) Integer.toString(temp_cnt) ;
     }
     return _ret ;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
     R _ret=null;
     String id1 = (String) n.f0.accept(this, argu);
     n.f1.accept(this, argu);
     String id2 = (String) n.f2.accept(this, argu);
     if(((String)argu) == "second")
     {
       int num1 = Integer.parseInt(id1);
       int num2 = Integer.parseInt(id2);
       temp_cnt++;
       int first = temp_cnt;
       System.out.println("MOVE TEMP "+temp_cnt + " TEMP " + id1);

       temp_cnt++;
       int second = temp_cnt ;
       System.out.println("MOVE TEMP "+temp_cnt + " TEMP " + id2);
       // temp first and temp second have the present values of p1 and p2
       temp_cnt++;
       System.out.println("MOVE TEMP " + temp_cnt + " " + "PLUS" + " TEMP " + first + " TEMP " + second );
       int res = temp_cnt;
       // if value in temp_cnt = 2 return 1
       temp_cnt++ ;
       int r = temp_cnt ;
       System.out.println("MOVE TEMP " + temp_cnt + " NE " + "TEMP " + res + " 0");
       lbl++ ;
       System.out.println("CJUMP " + " TEMP " + r + " "+ "L"+lbl);
       temp_cnt++ ;

       System.out.println("MOVE TEMP " + temp_cnt + " 1 ");
       int label = ++lbl ;
       System.out.println("JUMP " + "L"+label);

       System.out.println("L"+(lbl-1));
       System.out.println("MOVE TEMP " + temp_cnt + " 0 ");
        System.out.println("L"+label+" NOOP");
       // else return 0
       return (R) Integer.toString(temp_cnt) ;
     }
     return _ret ;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu)
   {
     R _ret=null;
     String id1 = (String) n.f0.accept(this, argu);
     n.f1.accept(this, argu);
     String id2 = (String) n.f2.accept(this, argu);
    if(((String)argu) == "second")
    {

       temp_cnt++;
       System.out.println("MOVE TEMP " + temp_cnt + " LE " + " TEMP " + id1 + " TEMP " + id2 );
       return (R) Integer.toString(temp_cnt);

    }
     return _ret ;

  }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {

     R _ret=null;
     String id1 = (String) n.f0.accept(this, argu);
     n.f1.accept(this, argu);
     String id2 = (String) n.f2.accept(this, argu);
     if(((String)argu) == "second")
     {

        temp_cnt++;
        System.out.println("MOVE TEMP " + temp_cnt + " NE " + " TEMP " + id1 + " TEMP " + id2 );
        return (R) Integer.toString(temp_cnt);

     }
     return _ret ;
 }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      String id1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String id2 = (String) n.f2.accept(this, argu);
      if(((String)argu) == "second")
      {
          temp_cnt++ ;
          System.out.println("MOVE TEMP "+ temp_cnt + " PLUS TEMP " + id1 + " TEMP " + id2 );

          return (R) Integer.toString(temp_cnt);
      }
      return _ret ;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
     R _ret=null;
     String id1 = (String) n.f0.accept(this, argu);
     n.f1.accept(this, argu);
     String id2 = (String) n.f2.accept(this, argu);
     if(((String)argu) == "second")
     {
         temp_cnt++ ;
         System.out.println("MOVE TEMP "+ temp_cnt + " MINUS TEMP " + id1 + " TEMP " + id2 );

         return (R) Integer.toString(temp_cnt);
     }
     return _ret ;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
     R _ret=null;
     String id1 = (String) n.f0.accept(this, argu);
     n.f1.accept(this, argu);
     String id2 = (String) n.f2.accept(this, argu);
     if(((String)argu) == "second")
     {
         temp_cnt++ ;
         System.out.println("MOVE TEMP "+ temp_cnt + " TIMES TEMP " + id1 + " TEMP " + id2 );

         return (R) Integer.toString(temp_cnt);
     }
     return _ret ;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
     R _ret=null;
     String id1 = (String) n.f0.accept(this, argu);
     n.f1.accept(this, argu);
     String id2 = (String) n.f2.accept(this, argu);
     if(((String)argu) == "second")
     {
         temp_cnt++ ;
         System.out.println("MOVE TEMP "+ temp_cnt + " DIV TEMP " + id1 + " TEMP " + id2 );
         return (R) Integer.toString(temp_cnt);
     }
     return (R) "int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
    // returns an integer
   public R visit(ArrayLookup n, A argu) {
     R _ret=null;
     String str = null ;
     String id1 = (String) n.f0.accept(this, argu);
     n.f1.accept(this, argu);
    String id2  = (String) n.f2.accept(this, argu);
    int val = 0 ;
     if(((String)argu) == "second")
     {
       temp_cnt ++ ;
       System.out.println("MOVE TEMP " + temp_cnt + " PLUS TEMP " + id2 + " 1 ");
       temp_cnt ++ ;
       System.out.println("MOVE TEMP " + temp_cnt + " TIMES TEMP " + (temp_cnt-1) + " 4 ");
       temp_cnt++ ;
       System.out.println("MOVE TEMP " + temp_cnt + " PLUS " + " TEMP "  + id1 + " TEMP " + (temp_cnt -1 ));
       temp_cnt++;
       System.out.println("HLOAD TEMP " + temp_cnt + " TEMP " + (temp_cnt-1) + " 0 ");
       _ret = (R) Integer.toString(temp_cnt);

     }
     n.f3.accept(this, argu);
     return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      String type = (String) n.f0.accept(this, argu);
      currstring = type ;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
       if(((String)argu) == "second")
       {
            // PrimaryExpression belongs to identifier
            // Assuming arrays are from class fields
            int size = temp_cnt ;
            temp_cnt ++ ;
             System.out.println("HLOAD TEMP " + temp_cnt + " TEMP " + type + " 0 ");
            return (R) Integer.toString(temp_cnt);
       }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {

       R _ret=null;


       if(((String)argu) == "second")
       {
         String eArgs ;
         String id = (String) n.f0.accept(this, (A) "MessageSend") ;
         String r ;
         currstring = id ;
        n.f1.accept(this, argu);
        String funcname = (String) n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        expList.clear();
         n.f4.accept(this, argu);
         int num ;
         int fnum = 0 ;
         //System.out.println(id);
         if(!id.equals("this"))
         {
           // two possibilities
           // this can be cname or an integer

          try{
             num = Integer.parseInt(id) ;
            // System.out.println(num);
            class_record = num;
             temp_cnt++ ;
             System.out.println("HLOAD TEMP " + temp_cnt + " TEMP " +  num + " 0 "   );
             temp_cnt++;
             int val = st.classList.get(currclass).funcRevList.get(funcname);
              fnum = temp_cnt;
             System.out.println("HLOAD TEMP " + temp_cnt + " TEMP " + (temp_cnt-1) + " " + (val-1)*4 );
           }
           catch(Exception e ){
             //System.out.println("Encountered identifier " + id );

                String classOfid = st.getType(id ,cname , fname );
                 if(st.classList.get(cname).funcList.get(fname).funcVarList.containsKey(id))
                 {
                   int ftemp = st.classList.get(cname).funcList.get(fname).funcVarOrdList.get(id);
                   temp_cnt++ ;
                   System.out.println("HLOAD TEMP " + temp_cnt  + " TEMP " +  ftemp + " 0 "   );
                   class_record = ftemp ;
                   temp_cnt++;
                     classOfid = st.getType(id ,cname , fname );
                   int val = st.classList.get(classOfid).funcRevList.get(funcname);
                   fnum = temp_cnt;

                   System.out.println("HLOAD TEMP " + temp_cnt + " TEMP " + (temp_cnt-1) + " " + (val-1)*4 );

                 }
                 else if( st.classList.get(cname).funcList.get(fname).paraList.contains(id))
                 {
                   int ftemp = st.classList.get(cname).funcList.get(fname).funcParList.get(id) ;
                   temp_cnt++ ;
                   System.out.println("HLOAD TEMP " + temp_cnt  + " TEMP " +  ftemp + " 0 "   );
                   class_record = ftemp ;
                   temp_cnt++;
                  // System.out.println("currclass is : " + currstring);
                  // System.out.println("funcname is : " + funcname );
                  classOfid = st.getType(id ,cname , fname );
                   int val = st.classList.get(classOfid).funcRevList.get(funcname);
                   //System.out.println("Val is : " + val );
                   fnum = temp_cnt;
                   System.out.println("HLOAD TEMP " + temp_cnt + " TEMP " + (temp_cnt-1) + " " + (val-1)*4 );
                 }
                 else if( st.classList.get(cname).varList.containsKey(id))
                 {
                   //System.out.println(id + " is From class Fields of class " + cname );
                   int ftemp = st.classList.get(cname).clsVarOrd.get(id);
                   //System.out.println(ftemp);
                   //int ftemp =
                   temp_cnt++ ;
                   //System.out.println("id is : " + id );
                   System.out.println("HLOAD TEMP " + temp_cnt  + " TEMP 0 " +  (ftemp)*4 );
                   //System.out.println("HLOAD TEMP " + temp_cnt  + " TEMP 0 " +  (ftemp+1)*4 );
                   class_record = temp_cnt ;
                   //class_record = 0 ;
                   //HLOAD TEMP 14 TEMP 12 0
                   temp_cnt++ ;
                   System.out.println("HLOAD TEMP " + temp_cnt + " TEMP " + class_record + " 0 ");
                   temp_cnt++;
                   classOfid = st.getType(id ,cname , fname );
                   int val = st.classList.get(classOfid).funcRevList.get(funcname);
                   fnum = temp_cnt;
                   System.out.println("HLOAD TEMP " + temp_cnt + " TEMP " + (temp_cnt-1) + " " + (val-1)*4 );

                 }
                //System.out.println(classOfid);
           }

         }
         else
         {
           //System.out.println("For This Expression");
           temp_cnt++ ;
           class_record = 0 ;
           System.out.println("HLOAD TEMP " + temp_cnt + " TEMP " + class_record + " 0 " );
           temp_cnt++;
           int val = st.classList.get(cname).funcRevList.get(funcname);
           fnum = temp_cnt;
           System.out.println("HLOAD TEMP " + temp_cnt + " TEMP " + (temp_cnt-1) + " " + (val-1)*4 );

         }

         temp_cnt++ ;
         System.out.println("MOVE TEMP " + temp_cnt + " CALL TEMP " + fnum );
         System.out.print("( TEMP " + class_record);
         for( int i = 0 ; i < expList.size() ; i++ )
         {
            System.out.print(" TEMP " + expList.get(i)+ " " );
         }
         System.out.print(")");
         System.out.print('\n');
         _ret = (R) Integer.toString(temp_cnt) ;
         return _ret ;

       }
       else
       {
         String eArgs ;
         String id = (String) n.f0.accept(this, argu);
         String r ;
        n.f1.accept(this, argu);
        String funcname = (String) n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        expList.clear();
         n.f4.accept(this, argu);
       }

      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "?"
    * f2 -> PrimaryExpression()
    * f3 -> ":"
    * f4 -> PrimaryExpression()
    */
   public R visit(TernaryExpression n, A argu) {
      R _ret=null;
      String condition = (String ) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exp1 = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      String exp2 = (String) n.f4.accept(this, argu);
      if(((String)argu).equals("second"))
      {
          //System.out.println("Inside Ternary ");
          temp_cnt ++ ;
          int cnd = temp_cnt ;
          System.out.println("MOVE TEMP " + temp_cnt + " TEMP " + condition);
          temp_cnt ++ ;
          int zero = temp_cnt ;
          System.out.println("MOVE TEMP " + temp_cnt + " 0 ");
          temp_cnt++ ;
          System.out.println("MOVE TEMP " + temp_cnt + " NE " + "TEMP " + cnd + " TEMP " + zero );
          lbl++ ;
          int lble = lbl ;
          System.out.println("CJUMP TEMP " + temp_cnt + " L"+lbl);
          temp_cnt++ ;
          System.out.println("MOVE TEMP "+ temp_cnt + " TEMP " + exp1 );
          lbl++ ;
          int end = lbl ;
          System.out.println("JUMP " + "L"+lbl);
          System.out.println("L"+lble);
          System.out.println("MOVE TEMP " + temp_cnt + " TEMP " + exp2 );
          System.out.println("L"+end );
          System.out.println("NOOP");
          return (R) Integer.toString(temp_cnt);

      }
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */

    public R visit(ExpressionList n, A argu){
      R _ret = (R)"";

     String args = (String)n.f0.accept(this, argu);
     expList.add(args);
     String fargs = (String)n.f1.accept(this, argu);
     if(((String)argu).equals("second"))
     {
         _ret = (R)args;
     }
     return _ret;
    }



    /**
     * f0 -> ","
     * f1 -> Expression()
     */
    public R visit(ExpressionRest n, A argu){
      R _ret=(R)"";
       String args = (String)n.f0.accept(this, argu);
       args =  (String)n.f1.accept(this, argu);
       expList.add(args);
       if(((String)argu).equals("second"))_ret = (R)args;
       return _ret;
    }


   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu){
      R _ret=null;

      if(((String)argu).equals("second"))
      {
        //System.out.println("PrimaryExpression : " + id );
        String id = (String) n.f0.accept(this, argu);
        if(n.f0.which == 3 )
        {
          currstring = id ;
          if(((String)argu) == "second")
          {
              //System.out.println(st.classList.get(cname).funcList.get(fname).funcVarList);
              if(st.classList.get(cname).funcList.get(fname).funcVarList.containsKey(id))
              {
                      int ftemp = st.classList.get(cname).funcList.get(fname).funcVarOrdList.get(id);
                      //temp_cnt++ ;
                      return (R) Integer.toString(ftemp);
               }
              else if( st.classList.get(cname).funcList.get(fname).paraList.contains(id))
              {
                int ftemp = st.classList.get(cname).funcList.get(fname).funcParList.get(id) ;
                //temp_cnt++ ;
               return (R) Integer.toString(ftemp);
              }
              else if( st.classList.get(cname).varList.containsKey(id))
              {

                int ftemp = st.classList.get(cname).clsVarOrd.get(id);
                temp_cnt++ ;
                System.out.println("HLOAD " + " TEMP " + temp_cnt + " TEMP 0 " + (ftemp)*4);
               return (R) Integer.toString(temp_cnt);
              }
          }
        }
        else if ( n.f0.which == 4 )
        {
            return (R) "0";
        }
        return (R) id;
      }
      else if(((String)argu).equals("MessageSend"))
      {
          String id = (String) n.f0.accept(this, (A) "second");
        //  System.out.println("PrimaryExpression");
          return (R) id;
      }
      else
      {
          String id = (String) n.f0.accept(this, argu);
            return (R) id;
      }

   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;

      //String num = (String)
      // check where this id is coming from
      String id = (String) n.f0.accept(this, argu);
      if(((String)argu).equals("second"))
      {
          temp_cnt++;
          currnum = Integer.parseInt(id);
          //System.out.println(id);
          System.out.println("MOVE TEMP " + temp_cnt + " " + id );
          return (R) Integer.toString(temp_cnt);
      }
      return (R) _ret  ;
   }


   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      String id = (String) n.f0.accept(this, argu);
      if(((String)argu) == "second")
      {
        temp_cnt++;
        System.out.println("MOVE TEMP " + temp_cnt + " 1");

        return (R) Integer.toString(temp_cnt);
      }
      return (R) _ret ;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if(((String)argu) == "second")
      {
        temp_cnt++;
        System.out.println("MOVE TEMP " + temp_cnt + " 0");

        return (R) Integer.toString(temp_cnt);
      }
      return (R) _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
     R _ret=null;
     String id = (String) n.f0.accept(this, argu);
       // if(((String)argu) == "second")
       // {
       //     if(st.classList.get(cname).funcList.get(fname).funcVarList.containsKey(id))
       //     {
       //             int ftemp = st.classList.get(cname).funcList.get(fname).funcVarOrdList.get(id);
       //             temp_cnt++ ;
       //             return (R) Integer.toString(ftemp);
       //      }
       //     else if( st.classList.get(cname).funcList.get(fname).paraList.contains(id))
       //     {
       //       int ftemp = st.classList.get(cname).funcList.get(fname).funcParList.get(id) ;
       //       temp_cnt++ ;
       //      return (R) Integer.toString(ftemp);
       //     }
       //     else if( st.classList.get(cname).varList.containsKey(id))
       //     {
       //
       //       int ftemp = st.classList.get(cname).clsVarOrd.get(id);
       //       temp_cnt++ ;
       //      return (R) Integer.toString(ftemp);
       //     }
       // }
       // if(((String)argu) == "second")
       // {
       //   currstring = id ;
       // }
         return (R) id ;
     }




   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      // return the present class Name
      return (R) "this" ;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String id = (String) n.f3.accept(this, argu);
        if(((String)argu) == "second")
        {
            //int length = temp_cnt  ;
            // The above temp_cnt contains the length

            temp_cnt++;
            int temp1 = temp_cnt ;
            System.out.println("MOVE TEMP " + temp_cnt + " 1 ");
            temp_cnt++ ;
            int four = temp_cnt ;
            System.out.println("MOVE TEMP " + temp_cnt + " 4");
            temp_cnt ++ ;
            int t = temp_cnt ;
            System.out.println("MOVE TEMP " + temp_cnt + " PLUS " + " TEMP " + id + " TEMP " + temp1 );
            temp_cnt++ ;
            System.out.println("MOVE TEMP " + temp_cnt + " TIMES " + " TEMP " + t + " TEMP " + four );
            int val = temp_cnt ;
            temp_cnt ++ ;
            int arr = temp_cnt ;
            System.out.println("MOVE TEMP " + temp_cnt + " " + " HALLOCATE " + " TEMP " + val ) ;

             temp_cnt++ ;
             System.out.println("MOVE TEMP " + temp_cnt + " TEMP " + arr );
             System.out.println("HSTORE TEMP " + temp_cnt + " 0 " + " TEMP " + id );
             //System.out.println();
            //System.out.println("MOVE TEMP " + temp_cnt + " PLUS " + " TEMP " + arr + " 0 ");

            //System.out.println("HSTORE TEMP " + temp_cnt + " 0 " + " TEMP " + id );
            return (R) Integer.toString(arr);
        }
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String id = (String) n.f1.accept(this, argu);
      currclass = id ;
        if(((String)argu) == "second")
        {
            if(st.classList.containsKey(id) )
            {
                // class i
                // contains the class id
                //System.out.println("Inside Allocation");
                temp_cnt++ ;
                int field_siz = st.classList.get(id).varList.size() ;
                System.out.println("MOVE TEMP " + temp_cnt + " " + (field_siz+1)*4 );
                temp_cnt++ ;
                class_record  = temp_cnt ;
              //  int class_record = temp_cnt;
                //System.out.print(class_record);
                System.out.println("MOVE TEMP " + temp_cnt + " HALLOCATE " + "TEMP " + (temp_cnt-1) );


                temp_cnt++ ;
                int m = st.classList.get(id).funcList.size() ;
                // m is the number of functions
                System.out.println("MOVE TEMP " + temp_cnt + " " + m*4);
                temp_cnt++;
                int func_record = temp_cnt;
                // Function table has been allocated
                System.out.println("MOVE TEMP " + temp_cnt + " HALLOCATE " + " TEMP " + (temp_cnt-1));
                // Store Functions into the function Table
                temp_cnt++;
                // get the function List of id
                int i = 1 ;
                // creating the function table
                while(i <= m )
                {
                    // storing the functions of class in the function table
                    System.out.println("MOVE TEMP " + temp_cnt + " "+ id+"_"+ st.classList.get(id).funcOrdList.get(i));
                    System.out.println("HSTORE TEMP " + func_record + " " + (i-1)*4 + " TEMP " + temp_cnt);
                    temp_cnt++ ;
                    i++;
                }
                // function table created
                // store the func_record at the zeroth offset of class record


                System.out.println("HSTORE TEMP " + class_record + " 0 " + "TEMP " + func_record);

                //System.out.print('\n');
                st.classRecordList.put(id,class_record);
                // System.out.println(class_record);
                // System.out.print(Integer.toString(class_record));
                _ret =  (R) Integer.toString(class_record) ;
                //class_record = 0 ;
            }
        }

      n.f2.accept(this, argu);
      n.f3.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String id = (String) n.f1.accept(this, argu);
      if( ((String)argu) == "second")
      {
          // if id is 1 return 0
          int lab;
          temp_cnt++;
          System.out.println("MOVE TEMP " + temp_cnt + " 0 ");
          temp_cnt++ ;
          System.out.println("MOVE TEMP " + temp_cnt + " NE TEMP " + (temp_cnt -1 ) + " TEMP " + id );
          lbl++;
          lab = lbl;
          System.out.println("CJUMP TEMP " + temp_cnt + "L"+lbl);
          temp_cnt ++ ;
          System.out.println("MOVE TEMP "+ temp_cnt + " 0 ");
          lbl++ ;
          System.out.println("JUMP L"+lbl);
          System.out.println("L"+lab);
          System.out.println("MOVE TEMP " + temp_cnt + " 1 ");
          System.out.println("L"+lbl);
          System.out.println("NOOP");

          return (R) Integer.toString(temp_cnt);
          // if id is 0 return 1

      }
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
     R _ret=null;
       n.f0.accept(this, argu);
       String id =(String) n.f1.accept(this,argu);

       n.f2.accept(this, argu);
       if( ((String)argu) == "second")
       {
          temp_cnt++ ;
          System.out.println("MOVE TEMP "+ temp_cnt + " TEMP " + id);
         return (R) Integer.toString(temp_cnt);
       }

       return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
